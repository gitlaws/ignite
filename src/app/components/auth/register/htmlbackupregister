<div class="register-form-wrapper">
  <app-register-info></app-register-info>

  <form [formGroup]="registerForm" (ngSubmit)="onSubmit()">
    <div>
      <label for="username">Username:</label>
      <input id="username" formControlName="username" type="text" />
      <div
        *ngIf="
          registerForm.get('username')?.invalid &&
          registerForm.get('username')?.touched
        "
      >
        <small *ngIf="registerForm.get('username')?.errors?.['required']">
          Username is required.
        </small>
        <small *ngIf="registerForm.get('username')?.errors?.['minlength']">
          Username must be at least 3 characters long.
        </small>
      </div>
    </div>

    <div>
      <label for="password">Password:</label>
      <input id="password" formControlName="password" type="password" />
      <div
        *ngIf="
          registerForm.get('password')?.invalid &&
          registerForm.get('password')?.touched
        "
      >
        <small *ngIf="registerForm.get('password')?.errors?.['required']">
          Password is required.
        </small>
        <small *ngIf="registerForm.get('password')?.errors?.['minlength']">
          Password must be at least 6 characters long.
        </small>
      </div>
    </div>

    <div>
      <label for="email">Email:</label>
      <input id="email" formControlName="email" type="email" />
      <div
        *ngIf="
          registerForm.get('email')?.invalid &&
          registerForm.get('email')?.touched
        "
      >
        <small *ngIf="registerForm.get('email')?.errors?.['required']">
          Email is required.
        </small>
        <small *ngIf="registerForm.get('email')?.errors?.['email']">
          Invalid email format.
        </small>
      </div>
    </div>

    <button type="submit" [disabled]="registerForm.invalid">Register</button>
  </form>
</div>
<div class="register-form-wrapper">
  <app-register-info></app-register-info>

  <form [formGroup]="registerForm" (ngSubmit)="onSubmit()">
    <div>
      <label for="username">Username:</label>
      <input id="username" formControlName="username" type="text" />
      <div
        *ngIf="
          registerForm.get('username')?.invalid &&
          registerForm.get('username')?.touched
        "
      >
        <small *ngIf="registerForm.get('username')?.errors?.['required']">
          Username is required.
        </small>
        <small *ngIf="registerForm.get('username')?.errors?.['minlength']">
          Username must be at least 3 characters long.
        </small>
      </div>
    </div>

    <div>
      <label for="password">Password:</label>
      <input id="password" formControlName="password" type="password" />
      <div
        *ngIf="
          registerForm.get('password')?.invalid &&
          registerForm.get('password')?.touched
        "
      >
        <small *ngIf="registerForm.get('password')?.errors?.['required']">
          Password is required.
        </small>
        <small *ngIf="registerForm.get('password')?.errors?.['minlength']">
          Password must be at least 6 characters long.
        </small>
      </div>
    </div>

    <div>
      <label for="email">Email:</label>
      <input id="email" formControlName="email" type="email" />
      <div
        *ngIf="
          registerForm.get('email')?.invalid &&
          registerForm.get('email')?.touched
        "
      >
        <small *ngIf="registerForm.get('email')?.errors?.['required']">
          Email is required.
        </small>
        <small *ngIf="registerForm.get('email')?.errors?.['email']">
          Invalid email format.
        </small>
      </div>
    </div>

    <button type="submit" [disabled]="registerForm.invalid">Register</button>
  </form>
</div>

$background-color: #0d1117; $form-text-color: #c9d1d9; $input-background:
#161b22; $input-border: #30363d; $error-color: #f85149; $button-background:
#238636; $button-disabled-background: #484f58; $link-color: #58a6ff;
$link-hover-color: #1f6feb; $input-focus-border-color: lighten($input-border,
10%); $text-color: #c9d1d9; .register-form-wrapper { display: flex;
flex-direction: column; align-items: center; justify-content: center; padding:
30px; margin: auto; margin-bottom: 100px; // max-width: 600px; @media
(max-width: 768px) { padding: 20px; max-width: 100%; } @media (min-width: 768px)
and (max-width: 1024px) { padding: 25px; margin: 15px auto; max-width: 90%; } }
form { background-color: $background-color; // background: linear-gradient( //
135deg, // lighten($background-color, 5%), // darken($background-color, 5%) //
); color: $form-text-color; padding: 30px; border-radius: 12px; // box-shadow: 0
4px 8px rgba(0, 0, 0, 0.1); max-width: 500px; // margin: 20px auto; font-family:
"Roboto", "Arial", sans-serif; width: 100%; div { margin-bottom: 20px; } label {
display: block; margin-bottom: 10px; font-weight: bold; font-size: 1.1em; }
input { width: 100%; padding: 12px; margin-bottom: 15px; background-color:
$input-background; border: 1px solid $input-border; border-radius: 6px; color:
$form-text-color; font-size: 1em; &:focus { border-color:
$input-focus-border-color; outline: none; } } small { color: $error-color;
display: block; margin-top: 5px; font-size: 0.9em; } button { width: 100%;
padding: 12px; background-color: $button-background; color: $text-color; border:
none; border-radius: 6px; cursor: pointer; font-size: 1em; &:hover {
background-color: lighten($button-background, 10%); } &:disabled {
background-color: $button-disabled-background; cursor: not-allowed; } } }




import
{ Component, OnInit } from '@angular/core'; import { AuthService } from
'../../../services/auth.service'; import { CommonModule } from
'@angular/common'; import { FormsModule } from '@angular/forms'; import { Router
} from '@angular/router'; import { RegisterInfoComponent } from
'./register-info/register-info.component'; @Component({ selector:
'app-register', standalone: true, imports: [CommonModule,
RegisterInfoComponent], templateUrl: './register.component.html', styleUrls:
['./register.component.scss'], }) export class RegisterComponent { email!:
string; password!: string; constructor(private authService: AuthService) {}
register() { this.authService.register(this.email, this.password).catch((error)
=> { console.error('Registration error', error); }); } }
